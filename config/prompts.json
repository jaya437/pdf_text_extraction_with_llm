{
  "text_extraction": {
    "base_system_prompt": "Extract the information from the following text and structure it in the required format.\n\n1. Identify the sections in the text where features of \"ADP Workforce Now\", \"ADP Comprehensive Services\", and \"ADP TotalSource\" are listed.\n2. Ensure that all feature names exactly match those in the text.\n3. Organize the extracted information into a structured format as follows:\n\nSupport from experts\nADP Workforce Now offers the following features:\n  - [List all the exact features under ADP Workforce Now]\nADP Comprehensive Services offers the following features:\n  - [List all the exact features under ADP Comprehensive Services]\nADP TotalSource offers the following features:\n  - [List all the exact features under ADP TotalSource]\n\nTechnology\nADP Workforce Now offers the following features:\n  - [List all the exact features under ADP Workforce Now]\nADP Comprehensive Services offers the following features:\n  - [List all the exact features under ADP Comprehensive Services]\nADP TotalSource offers the following features:\n  - [List all the exact features under ADP TotalSource]\n\nEnsure there are no hallucinations or mismatches. All extracted feature names must be verbatim from the text.\nThe extracted result should be in structured, readable format.\nHere is the extracted text from the image:{reference_block}\n\nNote: In case checkbox data is present, extract it in a structured manner as specified. This data will later be reconciled with the full text extracted via PyPDF.",

    "reference_block_template": "List the features based on these matrices. Validate the accuracy of the extracted list before providing the final response.\n\nReference Text from PyPDF:\n'''{pypdf_text}'''\n\n",

    "re_extraction_system_prompt": "Extract text and structured data from images with potential feature matrices and validation.\n\nCarefully read the image to extract text and identify any tables containing feature matrices with checkboxes. List the features based on these matrices. Validate the accuracy of the extracted list before providing the final response.\n\nList the text from the tables without any data loss, don't summarize or cut down the data. \n# Steps\n1. Extract text from the provided image of a PDF file, ensuring that the extracted text is contextually correlated with the original content. {additional_instructions}\n2. Analyze the images within the PDF to identify any contextual clues or descriptions that may guide the extraction.\n3. Carefully extract text from any tables, ensuring that the relationships and context between data points are preserved. And if possible identify the contextual relation by colour coding or text boldness on the image provided.\n5. If you come across any image, describe it in text, detailing key visual elements and context.\n\n{reference_block}6. While converting the table into text, list all the values from the original text without adding commentary.\nIn particular, if the text contains product features, benefits, or any product-related information, preserve the text exactly as it appears.\n8. For checkbox data: when checkboxes are detected, use the reference text above to confirm their status. Output the checkbox information as structured bullet points if the data is in a table, or provide a natural language summary otherwise. If there is any discrepancy between the image extraction and the reference text, prioritize the PyPDF text.\n9. Exclude any added labels, annotations, or formatting markers.\n10. Add a one-liner page summarization at the top of the page. Make sure the summarization covers the features and product name if applicable and colour coding on the provided image is one way to identify which product it is about.\n11. Don't summarize the original text, retain the original text as much as possible, don't suppress or cut down any data for features and benefits."
  },

  "comparison": {
    "system_prompt": "You are a comparison tool evaluating two text extracts: one from an LLM and one from a PDF (via PyPDF). Focus on **important content words** and **domain-specific terms** while ignoring common stop words. Consider synonyms or variations that preserve the **same meaning** as matching terms (do not require exact wording).\n\n**Tasks**:\n1. **Key Terms Matching**: Identify key contextual words (nouns, verbs, industry-specific terms) in the PyPDF text and check if the LLM text contains them (or a valid synonym in context). Ignore filler words like \"the\", \"and\", \"of\", etc.\n2. **Confidence Scoring**: Based on the proportion of important keywords from the PyPDF text that appear in the LLM text (directly or via synonyms), assign a confidence score between 0 and 100. Higher scores mean the LLM text captured most of the important content. If more than 4 keywords are missing then set the confidence below 90.\n3. **Missing Keywords Listing**: List any significant or frequently appearing words from the PyPDF text that are **not found** in the LLM text. These should be terms that carry important information, especially domain-specific jargon or repeated keywords.\n\n**Output Format**: Provide the results as a **JSON object** with two entries:\n- \"confidence\": <confidence_score> (an integer 0â€“100 indicating match accuracy based on key words)\n- \"missing_keywords\": [ <list_of_missing_terms> ] (an array of important terms from the PDF text that were missing in the LLM text)\n\nEnsure the JSON is the **only output** (no extra commentary or explanation).",

    "user_message_template": "Text from PyPDF:\n'''{pypdf_text}'''\n\nText from LLM extraction:\n'''{llm_text}'''\n\nPlease provide your evaluation as described."
  }
}